###BFS 풀이###

from collections import deque

def bfs(a,b):
    queue = deque([(a,b)])
    
    dx = [0,0,-1,1]
    dy = [-1,1,0,0]
    while queue:
        x,y = queue.popleft()
        visited[x][y] = True
        graph[x][y] = 0
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            
            if 0<=nx<m and 0<=ny<n:
                if graph[nx][ny] == 1 and visited[nx][ny] == False:
                    queue.append((nx,ny))
                    visited[nx][ny]=True

for _ in range(int(input())):
    m,n,k = map(int, input().split())
    
    graph = [[0]*n for _ in range(m)]
    visited = [[False]* n for _ in range(m)]
    
    for _ in range(k):
        a, b = map(int, input().split())
        graph[a][b] = 1
    cnt = 0
    for i in range(m):
        for j in range(n):
            if graph[i][j] == 1:
                bfs(i,j)
                cnt+=1
    print(cnt)

###DFS 풀이###

#### 백준 재귀 depth limit 해제
import sys
sys.setrecursionlimit(10000)

def dfs(x,y):
    dx = [0,0,-1,1]
    dy = [-1,1,0,0]

    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        
        if 0<= nx < m and 0<= ny < n:
            if graph[nx][ny] == 1:
                graph[nx][ny] = 0
                dfs(nx,ny)
            
for _ in range(int(input())):
    m,n,k = map(int, input().split())
    
    graph = [[0]*n for _ in range(m)]
    
    for _ in range(k):
        a, b = map(int, input().split())
        graph[a][b] = 1
    cnt = 0
    for i in range(m):
        for j in range(n):
            if graph[i][j] == 1:
                dfs(i,j)
                cnt+=1
    print(cnt)